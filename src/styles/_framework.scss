@use "sass:math";

// Vars

$vendors: ('-webkit-','-moz-','-ms-','-o-','');
$vw-ref-width: 1280px; // default
$vw-disabled: false;

// functions

@function vw($size) {
  // Use this to get a value in vw based the design which has px values
  // for a specific viewport width.
  @if $vw-disabled {
    @return $size;
  } @else {
    @return math.div($size, $vw-ref-width) * 100vw;
  }
}

// Mixins

@mixin vendor($key, $val...) {
  // Low level mixin for prepending a property with known vendor prefixes
  @each $vendor in $vendors {
    #{$vendor}#{$key}: $val; 
  }
}

@mixin box-sizing($val...) {
  @include vendor(box-sizing, $val);
}

@mixin portrait {
  @media screen and (orientation: portrait) {
    @content;
  }
}

@mixin landscape {
  @media screen and (orientation: landscape) {
    @content;
  }
}

@mixin opacity($val) {
  $ieval: $val*100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$ieval+")";
  filter: alpha(opacity=$ieval);
  -moz-opacity: $val;
  -khtml-opacity: $val;
  opacity: $val;
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }
  @include optional-at-root(':-moz-placeholder') {
    @content;
  }
  @include optional-at-root('::-moz-placeholder') {
    @content;
  }
  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::placeholder') {
    @content;
  }
}

@mixin retina {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    @content;
  }
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin transition($val...) {
  @include vendor(transition, $val);
}

@mixin animation($val...) {
  @include vendor(animation, $val);
}

@mixin transform($val...) {
  @include vendor(transform, $val);
}

@mixin column-count($val...) {
  @include vendor(column-count, $val);
}

@mixin column-gap($val...) {
  @include vendor(column-gap, $val);
}

@mixin fixed-proportions-wrap($width: 16, $height: 9) {
  position: relative; 
  height: 0; overflow: hidden;
  padding-bottom: (math.div($height, $width) * 100%);
  & > * {
    position: absolute; left: 0; top: 0;
    width: 100%; height: 100%;
  }
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

// Extendable classes

%strip-margins-container {
  > *:first-child {
    margin-top: 0;
  }
  > *:last-child {
    margin-bottom: 0;
  }
}

// Resets

:root {
  --real100vh: 100vh; // Use this to fix iOS 100vh problem
}

* {
  @include box-sizing(border-box);
  &:before, &:after {
    @include box-sizing(border-box);
  }
}

html {
  font-size: 100%;
  //  text-rendering: optimizeLegibility;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body, html {
  margin: 0;
  padding: 0;
}

img {
  display: block;
  width: 100%;
  border: 0;
  margin: 0;
  padding: 0;
}

ul, ol {
  list-style: none;
  margin: 0;
  padding: 0;
}

address { font-style: normal; }

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display:block;
}

iframe { border: 0; }

a { color: inherit; }

// Debug spacing problems

%debug {
  * { background-color: rgba(255,0,0,.2); }
  * * { background-color: rgba(0,255,0,.2); }
  * * * { background-color: rgba(0,0,255,.2); }
  * * * * { background-color: rgba(255,0,255,.2); }
  * * * * * { background-color: rgba(0,255,255,.2); }
  * * * * * * { background-color: rgba(255,255,0,.2); }
  * * * * * * * { background-color: rgba(255,0,0,.2); }
  * * * * * * * * { background-color: rgba(0,255,0,.2); }
  * * * * * * * * * { background-color: rgba(0,0,255,.2); }
}


